{"./":{"url":"./","title":"首页","keywords":"","body":"首页 应用 文档编辑 Windows 操作技巧 开发 软件 网络 Git & Github Gitbook 导航 常用软件 常用网站 "},"应用/文档编辑/文档编辑.html":{"url":"应用/文档编辑/文档编辑.html","title":"文档编辑","keywords":"","body":"文档编辑 CHM 制作与反编译 "},"应用/文档编辑/chm.html":{"url":"应用/文档编辑/chm.html","title":"CHM文档","keywords":"","body":"CHM 制作与反编译 一、CHM 制作： 1、工具：Microsoft Html Help Workshop 2、使用说明： 二、成品效果： 三、CHM 反编译： 一、CHM 制作： 1、工具：Microsoft Html Help Workshop 免费、功能齐全 搜索本地电脑：“Html Help Workshop”，若没有集成在系统里，网络搜索，下载安装。 2、使用说明： 1 — 工程属性： 勾选 “Compile full-text search information” (开启全文搜索) 2 — 添加页面： 若是已经做好各个页面的链接，像一个网站一样，只添加首页即可 3 — 自定义窗口设置： Buttons 定义窗口按钮： Navigation Pane: 勾选 Search tab 和 Advanced (搜索页，高级搜索) 在设置好后点击 “确定” 按钮时，会有一个勾选 “Compile full-text search information” 的选项，勾选它 勾选后，效果是和 “1— 工程属性” 设置是一样的。 Files： TOC：目录文件 Index: 索引文件 Default: 打开文档时，默认显示页 Home：首页 Jump 1&2: 自定义链接（需勾选 “Buttons” 里面的 Jump 按钮） 4 — 编译 Contents — 设置目录结构： 1 — 父级文件（需要关联页面） 2 — 子级文件（需要关联页面） 3 — 编辑页面 4 — 删除页面 5 — 移动页面 Index — 关键字索引（像电子词典） 1 — 添加关键字 每个关键字，都可以链接多个页面 2 — 按字母表排序所有关键字 二、成品效果： 三、CHM 反编译： ​ 在chm所在文件夹运行 Windows Powershell： hh.exe -decompile ./ C:\\Users\\Me\\Desktop\\123.chm 注释： “hh.exe” — Html Help.exe “-decompile” — 反编译 “./ ” — 输出到源文件夹，也可以设置为其他文件夹 “C:\\Users\\Me\\Desktop\\123.chm” — 需要反编译的文件 反编译之后，就可以得到该chm文档的源文件，编译速度、质量都不会比收费软件差 "},"应用/Windows操作技术/windows.html":{"url":"应用/Windows操作技术/windows.html","title":"Windows操作技巧","keywords":"","body":"Windows 操作技术 添加 \"Run CMD Here\" 到鼠标右键 Bat批处理 "},"应用/Windows操作技术/CMD右键.html":{"url":"应用/Windows操作技术/CMD右键.html","title":"添加 \"Run CMD Here\" 到右键","keywords":"","body":"添加 \"Run CMD Here\" 到鼠标右键 info 复制下面的代码到一个txt文档，改扩展名为：XXX.reg，双击添加到注册表即可 Windows Registry Editor Version 5.00 [HKEY_CLASSES_ROOT\\Directory\\shell\\OpenCmdHere] @=\"Run CMD Here\" \"Icon\"=\"cmd.exe\" [HKEY_CLASSES_ROOT\\Directory\\shell\\OpenCmdHere\\command] @=\"cmd.exe /s /k pushd \\\"%V\\\"\" [HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\OpenCmdHere] @=\"Run CMD Here\" \"Icon\"=\"cmd.exe\" [HKEY_CLASSES_ROOT\\Directory\\Background\\shell\\OpenCmdHere\\command] @=\"cmd.exe /s /k pushd \\\"%V\\\"\" [HKEY_CLASSES_ROOT\\Drive\\shell\\OpenCmdHere] @=\"Run CMD Here\" \"Icon\"=\"cmd.exe\" [HKEY_CLASSES_ROOT\\Drive\\shell\\OpenCmdHere\\command] @=\"cmd.exe /s /k pushd \\\"%V\\\"\" [HKEY_CLASSES_ROOT\\LibraryFolder\\background\\shell\\OpenCmdHere] @=\"Run CMD Here\" \"Icon\"=\"cmd.exe\" [HKEY_CLASSES_ROOT\\LibraryFolder\\background\\shell\\OpenCmdHere\\command] @=\"cmd.exe /s /k pushd \\\"%V\\\"\" "},"应用/Windows操作技术/BatRen.html":{"url":"应用/Windows操作技术/BatRen.html","title":"Bat批处理","keywords":"","body":"Bat 命令 1、批量重命名 2、del & rd & xcopy 2.1、del 语法 参数 示例 2.2、rd/rmdir 意义 语法 参数 示例 2.3、xcopy 语法 参数 示例 3、set 1、批量重命名 输出此文件夹里所有的文件名到 Excel 表格 dir /b>list.xls 打开此表格，利用公式：\"=&&\" 生成以下格式的语句： ren a.txt b.txt ren \"1 (1).txt\" 2.txt 复制生成的语句到此文件夹内的txt文档，并改后缀名为：“.bat”，点击运行即可重命名。 提示： Danger txt文档编码必须是ANSI，否则中文会乱码 2、del & rd & xcopy @ ECHO OFF :: 静默模式下删除test及其子目录里所有的文件 del c:\\test\\*.* /q /s cd c:\\test\\文件夹0 :: 静默模式下，删除：文件夹1、2、3及其子目录里的一切文件和文件夹 rd /q /s c:\\test\\文件夹0\\文件夹1 rd /q /s c:\\test\\文件夹0\\文件夹2 rd /q /s c:\\test\\文件夹0\\文件夹3 :: 复制文件夹1及其子目录和其中的文件到文件夹2 xcopy c:\\test\\文件夹1 c:\\test\\文件夹2 /s 2.1、del 删除一个或多个文件。 此命令执行与 erase 命令相同的操作。 Del命令也可以使用不同的参数从 Windows 恢复控制台运行。 有关详细信息，请参阅 Windows 恢复环境 (WinRE) 。 Danger 如果使用 del 从磁盘中删除文件，则无法检索该文件。 语法 del [/p] [/f] [/s] [/q] [/a[:]] erase [/p] [/f] [/s] [/q] [/a[:]] 参数 参数 说明 指定一个或多个文件或目录的列表。 通配符可用于删除多个文件。 如果指定了目录，则会删除该目录中的所有文件。 /p 删除指定文件之前提示确认。 /f 强制删除只读文件。 /s 删除当前目录和所有子目录中的指定文件。 显示要删除的文件的名称。 /q 指定安静模式。 不会提示您确认删除。 /a [：] 基于以下文件属性删除文件：r 只读文件h 隐藏文件我 不是内容索引文件s 系统文件准备好存档的文件**l 重新分析点-** 用作前缀，即 \"not\". /? 在命令提示符下显示帮助。 备注 如果使用 del /p 命令，你将看到以下消息： FileName, Delete (Y/N)? 若要确认删除，请按 Y。若要取消删除并显示下一个文件名 (如果指定了一组文件) ，请按 N。若要停止 del 命令，请按 CTRL + C。 如果禁用命令扩展， /s 参数将显示找不到的任何文件的名称，而不是显示要删除的文件的名称。 如果在参数中指定特定文件夹 ，则还将删除所有包含的文件。 例如，如果要删除 \\work 文件夹中的所有文件，请键入： del \\work 您可以使用通配符 (* 和 ？) 一次删除多个文件。 但是，若要避免无意中删除文件，应慎重使用通配符。 例如，如果键入以下命令： del *.* Del命令显示以下提示： Are you sure (Y/N)? 若要删除当前目录中的所有文件，请按 Y ，然后按 enter。 若要取消删除，请按 N ，然后按 enter。 备注 在将通配符用于 del 命令之前，请使用与 dir 命令相同的通配符来列出所有要删除的文件。 示例 若要删除驱动器 C 上名为 Test 的文件夹中的所有文件，请键入下列内容之一： del c:\\test del c:\\test\\*.* 若要从当前目录中删除文件扩展名为 .bat 的所有文件，请键入： del *.bat 若要删除当前目录中的所有只读文件，请键入： del /a:r *.* 2.2、rd/rmdir 意义 删除目录。 Rmdir命令也可以使用不同的参数从 Windows 恢复控制台运行。 备注 此命令与 [rd 命令]相同。 语法 rmdir [:] [/s [/q]] 参数 参数 说明 [:] 指定要删除的目录的位置和名称。 路径 是必需的。 如果在 ) 指定 路径的开头包含反斜杠 (，则该 路径 将从根目录开始 (，而与当前目录) 无关。 /s 删除 (指定目录及其所有子目录（包括) 的所有文件）的目录树。 /q 指定安静模式。 删除目录树时不提示进行确认。 /Q参数仅在指定 /s时才起作用。警告： 在安静模式下运行时，将删除整个目录树而不进行确认。 请确保在使用 /q 命令行选项之前移动或备份重要文件。 /? 在命令提示符下显示帮助。 备注 不能删除包含文件（包括隐藏文件或系统文件）的目录。 如果尝试这样做，将显示以下消息： The directory is not empty 使用 dir/a 命令列出) (包括隐藏文件和系统文件。 然后，使用带有 -h的attrib命令删除隐藏的文件属性，使用- s删除系统文件属性，或使用 -h-s删除隐藏文件和系统文件属性。 删除隐藏属性和文件属性后，可以删除这些文件。 不能使用 rmdir 命令删除当前目录。 如果尝试删除当前目录，将显示以下错误消息： The process can't access the file because it is being used by another process. 如果收到此错误消息，则必须更改为其他目录 (不是当前目录) 的子目录，然后重试。 示例 若要更改为父目录，以便可以安全地删除所需的目录，请键入： cd .. 若要从当前目录中删除名为 test (及其所有子目录和文件) 的目录，请键入： rmdir /s test 若要在安静模式下运行前面的示例，请键入： rmdir /s /q test 2.3、xcopy 复制文件和目录，包括子目录。 有关如何使用此命令的示例，请参阅示例。 语法 Xcopy [] [/w] [/p] [/c] [/v] [/q] [/f] [/l] [/g] [/d [:MM-DD-YYYY]] [/u] [/i] [/s [/e]] [/t] [/k] [/r] [/h] [{/a | /m}] [/n] [/o] [/x] [/exclude:FileName1[+[FileName2]][+[FileName3]] [{/y | /-y}] [/z] [/b] [/j] 参数 参数 说明 必需。 指定要复制的文件的位置和名称。 此参数必须包含驱动器或路径。 [] 指定要复制的文件的目标。 此参数可以包含驱动器号和冒号、目录名称、文件名或它们的组合。 /W 显示以下消息，并在开始复制文件之前等待你的响应： 按任意键开始复制文件 () /p 提示您确认是否要创建每个目标文件。 /c 忽略错误。 /v 在将每个文件写入目标文件时对其进行验证，以确保目标文件与源文件完全相同。 /q 禁止显示 xcopy 消息。 /f 复制时显示源和目标文件名。 /l 显示要复制的文件的列表。 /g 如果目标不支持加密，则创建已解密的 目标 文件。 /d [： MM-DD] 仅复制在指定日期或指定日期之后更改的源文件。 如果不包括MM DD值，则xcopy会复制比现有目标文件新的所有源文件。 使用此命令行选项，可以更新已更改的文件。 /U 仅**从源副本复制文件。 /i 如果 源 是一个目录或包含通配符并且 目标 不存在，则 xcopy 假设 destination 指定目录名称并创建一个新目录。 然后， xcopy 将所有指定的文件复制到新目录中。 默认情况下， xcopy 会提示您指定 目标 是文件还是目录。 /s 复制目录和子目录，除非它们为空。 如果省略 /s，则 xcopy 在单个目录中工作。 /e 复制所有子目录（即使它们为空）。 使用 /e 和 /s 和 /t 命令行选项。 /t 复制 (的子目录结构，即树) ，而不是文件。 若要复制空目录，必须包含 /e 命令行选项。 遇到 复制文件并在 目标 文件上保留只读属性（如果存在于 源文件 上）。 默认情况下， xcopy 会删除只读属性。 /r 复制只读文件。 /h 复制具有隐藏文件和系统文件属性的文件。 默认情况下， xcopy 不复制隐藏文件或系统文件 /a 仅复制设置了存档文件属性的 源文件 。 /a 不修改源文件的 \"存档文件\" 属性。 /m 复制设置了其存档文件属性的 源文件 。 与 /a不同， /m 关闭源中指定的文件中的存档文件属性。 /n 使用 NTFS 短文件名或目录名称创建副本。 从 NTFS 卷向 FAT 卷复制文件或目录时，或者当 FAT 文件系统命名约定 (即，在目标文件系统上) 需要8.3 个字符时，需要 /n 。 目标文件系统可以是 FAT 或 NTFS。 /o (DACL) 信息复制文件所有权和随机访问控制列表。 /x (SACL) 信息复制文件审核设置和系统访问控制列表， (隐含 /o) 。 /exclude： FileName1 [+ [FileName2] [+ [FileName3] ( ) ] 指定文件的列表。 至少必须指定一个文件。 每个文件都包含搜索字符串，每个字符串在文件中的单独一行上。 如果任意字符串与要复制的文件的绝对路径的任何部分匹配，则将不复制该文件。 例如，如果指定字符串 obj ，将排除目录 obj 下的所有文件或扩展名为 .obj 的所有文件。 /y 禁止提示您确认是否要覆盖现有目标文件。 /-y 提示确认是否要覆盖现有目标文件。 /z 在可重启模式下通过网络复制。 /b 复制符号链接而不是文件。 此参数是在 Windows Vista®中引入的。 /j 无缓冲复制文件。 建议用于非常大的文件。 此参数是在 Windows Server 2008 R2 中添加的。 /? 在命令提示符下显示帮助。 备注 使用 /z 如果在复制阶段丢失连接 (例如，如果服务器脱机时断开连接) ，则在重新建立连接后会恢复。 /z 还显示每个文件完成的复制操作的百分比。 在 COPYCMD 环境变量中使用 /y 。 可以在 COPYCMD 环境变量中使用 /y 。 可以通过在命令行上使用 /-y 来覆盖此命令。 默认情况下，系统将提示您进行覆盖。 复制加密的文件 将加密文件复制到不支持 EFS 的卷会导致错误。 首先对文件进行解密，或将文件复制到支持 EFS 的卷。 追加文件 若要附加文件，请为目标指定单个文件，但对于源 (使用多个文件，使用通配符或 file1 + file2 + file3 格式) 。 目标的默认值 如果省略 Destination， xcopy 命令会将文件复制到当前目录中。 指定 目标 是否为文件或目录 如果 目标 不包含现有目录且不以反斜杠 (结尾 ) ，将显示以下消息： Does specify a file name or directory name on the target(F = file, D = directory)? 如果要将文件复制到文件中，请按 F。 如果要将文件复制到目录，请按 D。 您可以通过使用 /i 命令行选项来禁止显示此消息，这会导致 xcopy 假设目标是一个目录（如果源是多个文件或目录）。 使用 xcopy 命令为 目标 文件设置存档属性 如果在源文件中设置了此属性， xcopy 命令将创建具有 archive 属性集的文件。 比较 xcopy 和 diskcopy 如果有包含子目录中的文件的磁盘，并且想要将文件复制到具有不同格式的磁盘，请使用 xcopy 命令而不是 diskcopy。 由于 diskcopy 命令按曲目复制磁盘曲目，因此源和目标磁盘的格式必须相同。 Xcopy命令没有这一要求。 使用 xcopy ，除非你需要完整的磁盘映像副本。 Xcopy的退出代码 若要处理xcopy返回的退出代码，请在批处理程序的if命令行中使用ErrorLevel参数。 | 退出代码 | 说明 | | :------- | :----------------------------------------------------------- | | 0 | 复制文件时没有错误。 | | 1 | 找不到要复制的文件。 | | 2 | 用户按下 CTRL + C 终止了 xcopy。 | | 4 | 出现初始化错误。 内存或磁盘空间不足，或者您在命令行中输入了无效的驱动器名称或无效语法。 | | 5 | 出现磁盘写入错误。 | 示例 1. 若要复制所有文件和子目录 (包括从驱动器 a 到驱动器 B) 的任何空子目录，请键入： xcopy a: b: /s /e 2. 若要包括上一示例中的任何系统文件或隐藏文件，请添加/h 命令行选项，如下所示： xcopy a: b: /s /e /h 3. 若要使用自1993年12月29日以来发生更改的 \\Rawdata 目录中的文件更新 \\Reports 目录中的文件，请键入： xcopy \\rawdata \\reports /d:12-29-1993 4. 若要更新上一个示例中的 \\Reports 中存在的所有文件，而不考虑日期，请键入： xcopy \\rawdata \\reports /u 5. 若要获取前一个命令要复制的文件的列表 (也就是说，不) 实际复制文件，请键入： xcopy \\rawdata \\reports /d:12-29-1993 /l > xcopy.out 文件 xcopy 列出每个要复制的文件。 6. 若要将 \\Customer 目录和所有子目录复制到 \\ \\ 网络驱动器 H：上的目录 Public\\Address，请保留只读属性，并且在 H：上创建新文件时，请键入： xcopy \\customer h:\\public\\address /s /e /k /p 7. 若要发出前面的命令，请确保 xcopy 创建 \\Address 目录（如果不存在），并取消创建新目录时显示的消息，并按如下所示添加 /i 命令行选项： xcopy \\customer h:\\public\\address /s /e /k /p /i 8. 您可以创建一个批处理程序来执行 xcopy 操作，并使用 batch if 命令处理退出代码（如果出现错误）。 例如，以下批处理程序对 xcopy 源和目标参数使用可替换参数： @echo off rem COPYIT.BAT transfers all files in all subdirectories of rem the source drive or directory (%1) to the destination rem drive or directory (%2) xcopy %1 %2 /s /e if errorlevel 4 goto lowmemory if errorlevel 2 goto abort if errorlevel 0 goto exit :lowmemory echo Insufficient memory to copy files or echo invalid drive or command-line syntax. goto exit :abort echo You pressed CTRL+C to end the copy operation. goto exit :exit 若要使用上述批处理程序将 C:\\Prgmcode 目录及其子目录中的所有文件复制到驱动器 B，请键入： copyit c:\\prgmcode b: 命令解释器会将 %1和B： 替换为 %2的C:\\Prgmcode ，并使用 /e和 /s命令行选项。 如果 xcopy 遇到错误，批处理程序将读取退出代码，并转到相应 IF ERRORLEVEL 语句中指示的标签，然后显示相应的消息并退出批处理程序。 9. 此示例复制所有非空目录，并复制其名称与星号符号给定的模式匹配的文件。 xcopy .\\toc*.yml ..\\..\\Copy-To\\ /S /Y rem Output example. rem .\\d1\\toc.yml rem .\\d1\\d12\\toc.yml rem .\\d2\\toc.yml rem 3 File(s) copied 在前面的示例中，此特定的源参数值 。 \\即使 * \\删除了两个*路径 \\ 字符， docker-compose.override.yml 也会复制相同的3个文件。 但是，如果从 source 参数中删除星号通配符，则不会复制任何文件 。 \\docker-compose.override.yml*。 3、set set path=c:\\test set /p path=请输入路径： del %path%\\test.txt /q set 变量=变量值 /p 表变量值为输入值，输入变量值，然后赋值给变量。 然后就可以使用：%变量% 来代替变量值了 "},"应用/开发/开发.html":{"url":"应用/开发/开发.html","title":"开发","keywords":"","body":"开发 VS Code "},"应用/开发/vscode.html":{"url":"应用/开发/vscode.html","title":"VS Code","keywords":"","body":"VS CODE 主题 Night Owl Material Icon Theme 代码美化 Beautify 字体 Hack Nerd Font 自动补全 Tabnine Autocomplete AI 透明 Windows Opacity "},"应用/软件/软件使用.html":{"url":"应用/软件/软件使用.html","title":"软件","keywords":"","body":"软件使用 OBS 多平台直播 "},"应用/软件/obs.html":{"url":"应用/软件/obs.html","title":"OBS 多平台直播","keywords":"","body":"OBS 多平台直播 一、OBS下载与安装: 1、软件安装： 下载 2、默认安装即可 二、OBS 使用教学： 三、多平台 1、Youtube： 2、Facebook, IG, 任何其他支持PTMP的平台: 3、Line聊天室直播 4、网站平台 四、界面： info 尽量用配置高的电脑进行直播 一、OBS下载与安装: 1、软件安装： 下载 2、默认安装即可 二、OBS 使用教学： info Youtube 搜索 “OBS教学”，来学习如何使用 三、多平台 1、Youtube： OBS 文件 》 设置 》 推流 》选择 Youtube 》输入Youtube 的直播密钥即可 这个是主直播平台，其他平台可以用 OBS “直播多开插件” 2、Facebook, IG, 任何其他支持PTMP的平台: 直播多开插件 下载后解压 关闭OBS软件 复制解压内容到OBS根目录，默认路径：C:\\Program Files\\obs-studio OBS主界面左侧多出 “多路推流”，点击 “新建推流目标”，逐个设置 Facebook、IG等平台 获取 IG 的 RTMP URL 和 Stream key Yellow Duck (下载、安装) 安装后，登陆IG账号，即可获得 左侧列表可以点击 “开始” 或 “停止” 来控制各平台的直播 3、Line聊天室直播 虚拟摄像头（Line群组直播） 下载直接默认安装 OBS 工具 》 虚拟摄像头 》 开启 用电脑 Line 发起直播，Line 直播设置里，视频选择 OBS-Camera 虚拟摄像头即可 4、网站平台 进入 Youtube 直播账号的视频列表，找到直播视频，右键复制视频地址，或嵌入代码 然后粘贴代码到网站的帖子里，嵌入Youtube直播即可 四、界面： 左侧 “多路推流” 列表，点击开始按钮既开始直播 下方 “来源” 是捕捉视频来源，可以是整个屏幕，可以是某个窗口，可以是浏览器等等，也可以混合多种元素 右下角 “控件”，点击 “开始推流”，即可开始主直播平台的直播，主直播平台设置参三1 "},"网络/gitandgithub.html":{"url":"网络/gitandgithub.html","title":"Git & Github","keywords":"","body":"Git & Github 一、注册 Github 二、新建 Github 仓库： 三、使用 Git 部署本地工程到 Github： 1、安装 git ：https://git-scm.com/ 1.1、配置账号信息： 1.2、关联 git 和 github，一直按回车到生成密钥为止: 1.3、打开 github 设置，复制已经生成的密钥到 “SSH and GPG keys” 里面 2、进入工程文件夹，鼠标右键 “Git Bash Here”： 2.1、初始化： 2.2、添加文件： 2.3、提交已经添加的文件到仓库： 2.4、关联 本地仓库与 github 仓库： 2.5、上传本地仓库到 github 仓库某个分支（第一次上传使用 “-u”）： 2.6、新建分支 \"gh-pages\"，并切换到该分支： 2.7、删除分支： 2.8、忽略规则： 一、注册 Github ​ 打开 https://github.com/ 用邮箱注册。 二、新建 Github 仓库： 点击 “Your Repository ” 填写 “Repository name”，如果仓库名为：“用户名.githut.io” 的话，该仓库名可以直接作为访问地址。 三、使用 Git 部署本地工程到 Github： 1、安装 git ：https://git-scm.com/ 1.1、配置账号信息： $ git config --global user.name \"John Doe\" （github用户名） $ git config --global user.email johndoe@example.com （github 注册邮箱） 1.2、关联 git 和 github，一直按回车到生成密钥为止: $ ssh-keygen -t rsa -C (生成密钥文件) 1.3、打开 github 设置，复制已经生成的密钥到 “SSH and GPG keys” 里面 2、进入工程文件夹，鼠标右键 “Git Bash Here”： 2.1、初始化： $ git init 2.2、添加文件： $ git add . (添加全部) $ git add readme.md (添加单个文件) $ git add book\\ (添加一个文件夹) 2.3、提交已经添加的文件到仓库： $ git commit -m \"备注说明\" 2.4、关联 本地仓库与 github 仓库： $ git remote add origin https://github.com/yesura/yesura.github.io.git 2.5、上传本地仓库到 github 仓库某个分支（第一次上传使用 “-u”）： $ git push -u origin master $ git push origin gh-pages 2.6、新建分支 \"gh-pages\"，并切换到该分支： $ git branch gh-pages (新建) $ git checkout gh-pages （切换） $ git checkout -b gh-pages （新建并切换） 2.7、删除分支： $ git branch -d gh-pages 2.8、忽略规则： $ touch .gitignore (生成忽略文件) 编辑 .gitignore target //忽略这个target目录 angular.json //忽略这个angular.json文件 log/* //忽略log下的所有文件 css/*.css //忽略css目录下的.css文件 "},"网络/aboutgitbook/gitbook.html":{"url":"网络/aboutgitbook/gitbook.html","title":"Gitbook","keywords":"","body":"Gitbook 一、安装： 二、使用： 三、配置： 1、book.json配置文件： 2、我的 book.json： 3、去掉自带链接：“Published with GitBook” 四、插件： 1、搜索： 2、我安装的插件： 3、安装与禁用 GitBook 是一个基于 Node.js 的命令行工具，可使用 Github/Git 和 Markdown 来制作精美的电子书，GitBook 并非关于 Git 的教程。 GitBook 是一个基于 Node.js 的命令行工具，可使用 Github/Git 和 Markdown 来制作精美的电子书，GitBook 并非关于 Git 的教程。 GitBook支持输出多种文档格式： 静态站点：GitBook默认输出该种格式，生成的静态站点可直接托管搭载Github Pages服务上。 PDF：需要安装gitbook-pdf依赖。 eBook：需要安装ebook-convert。 单HTML网页：支持将内容输出为单页的HTML，不过一般用在将电子书格式转换为PDF或eBook的中间过程。 JSON：一般用于电子书的调试或元数据提取。 使用GitBook制作电子书，必备两个文件：README.md和SUMMARY.md。 本网站就是用 Gitbook 制作的 一、安装： info 提示： 安装 gitbook 之前要先安装 node.js，因为兼容性问题，下载老版本node.js：https://nodejs.org/en/blog/release/v12.13.0/ ​ 安装node后，在 cmd 里 运行该语句，安装gitbook到本地： $ npm install gitbook-cli -g 二、使用： 1. 新建书籍：进入想要存放书籍的文件夹，运行该语句： $ gitbook init 2. 预览书籍：运行该语句，并打开生成的ip地址预览书籍： $ gitbook serve 3. 发布书籍：运行该语句，构建发布： $ gitbook build 4. 生成电子书：(第一次生成时，根据提示安装插件) $ gitbook pdf $ gitbook epub $ gitbook mobi 三、配置： 1、book.json配置文件： gitbook { \"description\": \"This is such a great book!\" } description { \"description\": \"This is such a great book!\" } styles 这个选项是用来自定义书本的css的。 例子： { \"styles\": { \"website\": \"styles/website.css\", \"ebook\": \"styles/ebook.css\", \"pdf\": \"styles/pdf.css\", \"mobi\": \"styles/mobi.css\", \"epub\": \"styles/epub.css\" } } plugins { \"plugins\": [\"mathjax\"] } 书本使用的插件列表被定义在 book.json 的配置中。 pluginsConfig { \"plugins\": [\"myplugin\"], \"pluginsConfig\": { \"myPlugin\": { \"message\": \"Hello World\" } } } structure 这个选项是用来覆盖GitBook使用的路径的。 例如你想要使用 INTRO.md 代替 README.md： { \"structure\": { \"readme\": \"INTRO.md\" } } variables { \"variables\": { \"myTest\": \"Hello World\" } } 2、我的 book.json： { \"name\": \"Yesura\", \"version\": \"0.0.0\", \"description\": \"Yesura\", \"main\": \"./index.js\", \"gitbook\": \"^3.2.3\", \"gitbook-cli\": \"^2.3.2\", \"root\": \"./content\", \"output\": \"./docs\", \"title\": \"Yesura\", \"plugins\": [ \"-lunr\", \"-search\", \"search-pro\", \"fontsettings\", \"-highlight\", \"prism\", \"prism-themes\", \"styled-blockquotes\", \"copy-code-button\", \"cuav-chapters\", \"anchor-navigation-ex-toc\", \"todos\", \"etoc\", \"tags\" ], \"pluginsConfig\": { \"prism\": { \"css\": [\"prismjs/themes/prism-okaidia.css\"] }, \"anchor-navigation-ex-toc\": { \"showLevel\": false }, \"etoc\": { \"h2lb\": 3, \"mindepth\": 3, \"maxdepth\": 4, \"notoc\": false }, \"simple-page-toc\": { \"maxDepth\": 3, \"skipFirstH1\": true }, \"tags\": { \"placement\": \"-bottom\" }, \"toc\": { \"addClass\": true, \"className\": \"toc\" } }, \"styles\": { \"website\": \"styles/website.css\", \"ebook\": \"styles/ebook.css\", \"pdf\": \"styles/pdf.css\", \"mobi\": \"styles/mobi.css\", \"epub\": \"styles/epub.css\" }, \"variables\": { \"version\": \"1.0.0\" } } 3、去掉自带链接：“Published with GitBook” 找到summary.html，屏蔽链接： C:\\Users\\.gitbook\\versions\\3.2.3\\node_modules\\gitbook-plugin-theme-default\\_layouts\\website\\summary.html 四、插件： 1、搜索： ​ 去npm官网搜索gitbook插件：https://www.npmjs.com/ 2、我安装的插件： 中文搜索：https://www.npmjs.com/package/gitbook-plugin-search-pro-fixed 代码高亮：https://www.npmjs.com/package/gitbook-plugin-prism-dw 引用模块：https://www.npmjs.com/package/gitbook-plugin-styled-blockquotes 生成目录：https://www.npmjs.com/package/gitbook-plugin-anchor-navigation-ex-toc 3、安装与禁用 ​ 在 book.json 文件里配置插件，插件名前加 “-” 意思是禁用该插件。 { \"plugins\": [\"-highlight\", \"prism\", \"prism-themes\"] } \"pluginsConfig\": { \"prism\": { \"css\": [ \"prismjs/themes/prism-solarizedlight.css\" ] } } ​ 配置好以后，运行安装命令： $ gitbook install "},"网络/社交/tiktok.html":{"url":"网络/社交/tiktok.html","title":"Tik Tok 运营","keywords":"","body":"Tik Tok 运营 一、进入市场： 1、无 SIM 卡： 2、有 SIM 卡： 二、吸引流量： 1、内容设计： a、TikTok Top50 Videos 内容分析：音乐、短、创意 b、某个有六百万粉丝的电商大号视频结构分析：痛点、产品、解决痛点 2、其他操作： a、人为引导： b、巧用 #标签： c、投放广告、网红合作 三、导出流量： 四、数据分析： 一、进入市场： 1、无 SIM 卡： 第一步必须从手机取出所有 SIM 卡（Tik Tok会根据 SIM 卡定位）。 手机设置为目标国家语言、时间、地理。 虚拟GPS到目标国家。 VPN连目标国家网络。 注册TikTok的邮箱账号。 无 sim 用户大量增加后，官方可能会封号。 2、有 SIM 卡： 满足 1 的所有条件。 购买目标国家SIM卡，开国际漫游。 二、吸引流量： Tik Tok是一个音乐主题的短视频社交App，重点就是音乐、短视频、社交，所以在视频作品中，音乐的匹配，特别是节奏卡点，非常重要。 TikTok去中心化推荐机制：而最受欢迎的top50作品，平均时长在15秒左右，平台本身也限制在60秒以内。机器会自动选择优质的内容进行大量的曝光，内容表现越好，推荐越多。 推荐机制根据：完播率，转发数/率、评论数/率、点赞数/率、关注数/率 1、内容设计： a、TikTok Top50 Videos 内容分析：音乐、短、创意 ​ - 音乐（节奏感强） ​ - 短：TOP Videos 一般在15秒以内（根据海外博主的经验，15秒短视频中，3秒、5秒和10秒是关键点。） ​ - 创意：（眼前一亮） b、某个有六百万粉丝的电商大号视频结构分析：痛点、产品、解决痛点 ​ - 痛点演示：引起共鸣，产生好奇 ​ - 产品展示：产品细节，继续产生好奇 ​ - 产品应用：演示产品解决痛点的能力与效果，制造购买欲 ​ - 引流用户：把有购买意愿的用户，通过链接引流到电商平台，达到销售目的 2、其他操作： a、人为引导： ​ - 通过文字、声音等方式引导用户，评论、转发、点赞、关注 b、巧用 #标签： ​ - 标签太热门，播放量超万亿，不是惊世骇俗的创意很难出头。 ​ - 于是，众多海外博主纷纷转抄小路——附上与视频内容有关的、十亿以下的中游标签。 c、投放广告、网红合作 三、导出流量： 通过视频字幕引导、标题、评论和介绍引导用户关注或者打开第三方账号和网站。这点，Tik Tok 比较开放，目前在主页提供了绑定和直接跳转的功能。 外联支持项： bio 链接 Instagram 链接 YouTube 链接 正在测试的：website 链接 （只有部分用户有此选项，可以通过加入TikTok测试人员计划来获得。） 四、数据分析： 目前比较主流的TikTok数据分析工具有以下几款： GugeeData Analisa SoCiaTracker Pentos TikAnalytics "},"网络/website/SC.html":{"url":"网络/website/SC.html","title":"搜索网站设计","keywords":"","body":"搜索网站设计记录 tagsstart Python爬虫 Elasticsearch PHP JS Vue ElementUI tagsstop 一、架构设计： 二、开发：技术研究与总结 1、Python 爬虫 2、Elasticsearch API 3、Vue： 4、Element-UI 5、JavaScript 6、PHP 7、正则表达式： 三、上传与维护： 四、Todo List 五、搜索功能 六、清明爬虫程序全代码备份 一、架构设计： 二、开发：技术研究与总结 1、Python 爬虫 模拟浏览器爬取网页数据： import requests kv = {'user-agent':'Chrome/10.0'} #或者‘Mozilla/5.0’ url = \"http://www.google.com\" r = requests.get(url, headers = kv) # headers = kv 模拟Chrome浏览器 r.status_code #查看状态，200即表示已经成功抓取数据，其他数字是错误代码如：404 r.text #显示数据包内容（无格式） 对抓取的HTML数据，或本地HTML文件解析： from bs4 import BeautifulSoup #引入BeautifulSoup库 soup = BeautifulSoup(data, 'html.parser') #data可以是\"Hello World!\"\", 可以是r.text, 可以是 open(\"D://demo.html\") print(soup.prettiy()) #格式化输出 提取想要的信息： content = soup.p.parent #提取信息 tagDiv = 'div.post-content' #第二种方法提取信息, 或者tagDiv = 'div.post-content p'其中的p标签 art = soup.select(tagDiv) smalltilte = art.find_all('p', style=\"text-align: center;\") # 在有用信息里提取关键信息，保存为list for str in smalltilte: print(str) 保存信息为 JSON 文档： for titles in smalltitle: data.append(titles.string) #遍历得到的有效数据，抓取其中的字符串，保存为list from collections import defaultdict dict0 = defaultdict(list) # list 转换为 dict for stitles in data: dict0[\"stitles\"].append(stitles) import json dict0[\"url\"].append(url) print(dict0) json_str = json.dumps(dict0, ensure_ascii=False) # 禁用默认编码：AscII,以输出中文内容 with open('test_data.json', 'w') as json_file: # json文件路径默认是C盘User根目录 json_file.write(json_str) 清明网获取小标题的爬虫代码： import re import requests import json from bs4 import BeautifulSoup from collections import defaultdict url = 'http://www...' kv = {'user-agent':'Chrome/10.0'} data = [] output = open('data.txt', 'w+') r = requests.get(url, headers = kv) soup = BeautifulSoup(r.text, 'html.parser') content = soup.p.parent smalltitle = content.find_all('p', style=\"text-align: center;\") for titles in smalltitle: data.append(titles.string) dict0 = defaultdict(list) for stitles in data: dict0[\"stitles\"].append(stitles) dict0[\"url\"].append(url) print(dict0) json_str = json.dumps(dict0, ensure_ascii=False) with open('test_data.json', 'w') as json_file: json_file.write(json_str) BeautifulSoup 中文文档 2、Elasticsearch API Python写入数据： 安装：$ python -m pip install elasticsearch from elasticsearch import Elasticsearch es = Elasticsearch() doc = { # 吸入的内容格式 'author': 'author_name', 'text': 'Interensting content...' } res = es.index(index=\"test-index\", id=1, body=doc) #写入 print(res['result']) #结构： Elasticsearch().index(index=\"test-index\", id=1, body={\"我是插入数据的key\":\"我是插入数据的Velue\"}) PHP 调用 ES: 待更新.... 批量导入数据： POST _bulk {\"index\":{\"_index\":\"index_name\", \"_id\":id_num}} {\"url\":\"https://www.google.com\", \"stitles\":[\"title1\", \"title2\"]} 3、Vue： 待更新 4、Element-UI 待更新 5、JavaScript 待更新 6、PHP 待更新 7、正则表达式： 去掉string类里面的html标签： # 规则： content = re.compile(r']+>', re.S).sub('', '内容') # 用法： import re html='标题正文' dr = re.compile(r']+>', re.S) dd = dr.sub('', html) print(dd) 标题正文 # 实例： import re import requests from bs4 import BeautifulSoup url='https://www.google.com' r = requests.get(url) soup = BeautifulSoup(r.text, 'html.parser') html = soup.find_all('p') dr = re.compile(r']+>', re.S) data = [] for content in html: dd = dr.sub('', str(content)) # (.sub 能处理string类，所以要先转换成string) data.append(dd) print(data) '[© 2021 - Privacy - Terms]' 语法表： 字符 释义 \\ 将下一字符标记为特殊字符、文本、反向引用或八进制转义符。例如，“n”匹配字符“n”。“\\n”匹配换行符。序列“\\”匹配“\\”，“(”匹配“(”。 ^ 匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与“\\n”或“\\r”之后的位置匹配。 $ 匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与“\\n”或“\\r”之前的位置匹配。 * 零次或多次匹配前面的字符或子表达式。例如，zo 匹配“z”和“zoo”。 等效于 {0,}。 + 一次或多次匹配前面的字符或子表达式。例如，“zo+”与“zo”和“zoo”匹配，但与“z”不匹配。+ 等效于 {1,}。 ? 零次或一次匹配前面的字符或子表达式。例如，“do(es)?”匹配“do”或“does”中的“do”。? 等效于 {0,1}。 {n} n 是非负整数。正好匹配 n 次。例如，“o{2}”与“Bob”中的“o”不匹配，但与“food”中的两个“o”匹配。 {n,} n 是非负整数。至少匹配 n 次。例如，“o{2,}”不匹配“Bob”中的“o”，而匹配“foooood”中的所有 o。“o{1,}”等效于“o+”。“o{0,}”等效于“o*”。 {n,m} M 和 n 是非负整数，其中 n m。匹配至少 n 次，至多 m 次。例如，“o{1,3}”匹配“fooooood”中的头三个 o。'o{0,1}' 等效于 'o?'。注意：您不能将空格插入逗号和数字之间。 ? 当此字符紧随任何其他限定符（、+、?、{n}、{n,}、{n,m*}）之后时，匹配模式是“非贪心的”。“非贪心的”模式匹配搜索到的、尽可能短的字符串，而默认的“贪心的”模式匹配搜索到的、尽可能长的字符串。例如，在字符串“oooo”中，“o+?”只匹配单个“o”，而“o+”匹配所有“o”。 . 匹配除“\\n”之外的任何单个字符。若要匹配包括“\\n”在内的任意字符，请使用诸如“[\\s\\S]”之类的模式。 (pattern) 匹配 pattern 并捕获该匹配的子表达式。可以使用 $0…$9 属性从结果“匹配”集合中检索捕获的匹配。若要匹配括号字符 ( )，请使用“(”或者“)”。 (?:pattern) 匹配 pattern 但不捕获该匹配的子表达式，即它是一个非捕获匹配，不存储供以后使用的匹配。这对于用“or”字符 ('\\竖杠') 组合模式部件的情况很有用。例如，'industr(?:y'\\竖杠'ies) 是比 'industry'\\竖杠'industries' 更经济的表达式。 (?=pattern) 执行正向预测先行搜索的子表达式，该表达式匹配处于匹配 pattern 的字符串的起始点的字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，'Windows (?=95'\\竖杠'98'\\竖杠'NT'\\竖杠'2000)' 匹配“Windows 2000”中的“Windows”，但不匹配“Windows 3.1”中的“Windows”。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。 (?!pattern) 执行反向预测先行搜索的子表达式，该表达式匹配不处于匹配 pattern 的字符串的起始点的搜索字符串。它是一个非捕获匹配，即不能捕获供以后使用的匹配。例如，'Windows (?!95'\\竖杠'98'\\竖杠'NT'\\竖杠'2000)' 匹配“Windows 3.1”中的 “Windows”，但不匹配“Windows 2000”中的“Windows”。预测先行不占用字符，即发生匹配后，下一匹配的搜索紧随上一匹配之后，而不是在组成预测先行的字符后。 x'\\竖杠'y 匹配 x 或 y。例如，'z'\\竖杠'food' 匹配“z”或“food”。'(z'\\竖杠'f)ood' 匹配“zood”或“food”。 [xyz] 字符集。匹配包含的任一字符。例如，“[abc]”匹配“plain”中的“a”。 *xyz* 反向字符集。匹配未包含的任何字符。例如，“abc”匹配“plain”中的“p”。 [a-z] 字符范围。匹配指定范围内的任何字符。例如，“[a-z]”匹配“a”到“z”范围内的任何小写字母。 *a-z* 反向范围字符。匹配不在指定的范围内的任何字符。例如，“a-z”匹配任何不在“a”到“z”范围内的任何字符。 \\b 匹配一个字边界，即字与空格间的位置。例如，“er\\b”匹配“never”中的“er”，但不匹配“verb”中的“er”。 \\B 非字边界匹配。“er\\B”匹配“verb”中的“er”，但不匹配“never”中的“er”。 \\cx 匹配 x 指示的控制字符。例如，\\cM 匹配 Control-M 或回车符。x 的值必须在 A-Z 或 a-z 之间。如果不是这样，则假定 c 就是“c”字符本身。 \\d 数字字符匹配。等效于 [0-9]。 \\D 非数字字符匹配。等效于 0-9。 \\f 换页符匹配。等效于 \\x0c 和 \\cL。 \\n 换行符匹配。等效于 \\x0a 和 \\cJ。 \\r 匹配一个回车符。等效于 \\x0d 和 \\cM。 \\s 匹配任何空白字符，包括空格、制表符、换页符等。与 [ \\f\\n\\r\\t\\v] 等效。 \\S 匹配任何非空白字符。与 \\f\\n\\r\\t\\v 等效。 \\t 制表符匹配。与 \\x09 和 \\cI 等效。 \\v 垂直制表符匹配。与 \\x0b 和 \\cK 等效。 \\w 匹配任何字类字符，包括下划线。与“[A-Za-z0-9_]”等效。 \\W 与任何非单词字符匹配。与“A-Za-z0-9_”等效。 \\xn 匹配 n，此处的 n 是一个十六进制转义码。十六进制转义码必须正好是两位数长。例如，“\\x41”匹配“A”。“\\x041”与“\\x04”&“1”等效。允许在正则表达式中使用 ASCII 代码。 *num* 匹配 num，此处的 num 是一个正整数。到捕获匹配的反向引用。例如，“(.)\\1”匹配两个连续的相同字符。 *n* 标识一个八进制转义码或反向引用。如果 *n 前面至少有 n 个捕获子表达式，那么 n 是反向引用。否则，如果 n 是八进制数 (0-7)，那么 n* 是八进制转义码。 *nm* 标识一个八进制转义码或反向引用。如果 *nm 前面至少有 nm 个捕获子表达式，那么 nm 是反向引用。如果 \\nm 前面至少有 n 个捕获，则 n 是反向引用，后面跟有字符 m。如果两种前面的情况都不存在，则 \\nm 匹配八进制值 nm，其中 n 和 m* 是八进制数字 (0-7)。 \\nml 当 n 是八进制数 (0-3)，m 和 l 是八进制数 (0-7) 时，匹配八进制转义码 nml。 \\un 匹配 n，其中 n 是以四位十六进制数表示的 Unicode 字符。例如，\\u00A9 匹配版权符号 (?)。 三、上传与维护： 购买服务器上传网站，调试配置服务器 购买域名绑定服务器 四、Todo List [x] PHP、Python、JS、Vue、Elasticsearch开发环境配置 [x] Elasticsearch批量导入方法 [x] Python爬虫爬取清明数据 [x] Python数据解析 [x] Python数据提取 [x] Python数据格式化输出 [x] PHP 调用 Elasticsearch [x] PHP 接受ES搜索结果 [x] PHP 转换搜索结果为网页代码，提交浏览器渲染 [x] 分别查询、标题、小标题、等不同项目 [x] 多类合并查询 [x] 查询结果高亮、 [x] 查询结果显示内容链接 [x] Python按Elasticsearch批量导入代码格式，输出数据 [x] Python爬取纲目、摘录 [x] Python自动导入数据到Elasticsearch [ ] Vue + ElementUI 设计登陆页、查询页、搜索结果页 [ ] PHP 登陆验证 [ ] ES 中文分词器使用，并自定义本领域专用名词 [ ] ES 模糊搜索技术应用 [ ] 导入清明之外的其他数据，丰富查询范围 五、搜索功能 [ ] 小标题搜索 [ ] 纲目搜索 [ ] 摘录搜索 [ ] Tag搜索 [ ] 模糊搜索 [ ] 经文搜索 六、清明爬虫程序全代码备份 import re import requests import json from bs4 import BeautifulSoup from collections import defaultdict from elasticsearch import Elasticsearch def getURL(url, kv): r = requests.get(url, headers = kv) soup = BeautifulSoup(r.text, 'html.parser') content = soup.p.parent urls = content.find_all('a') links = [] for link in urls: links.append(link.attrs['href']) return links def getURL2(links, kv): sublinks = [] for link in links: r = requests.get(link, headers = kv, timeout = 30) r.raise_for_status() soup = BeautifulSoup(r.text, 'html.parser') content = soup.p.parent urls = content.find_all('a') for link in urls: if link.string == \"纲目\": # 如果a标签里的内容是纲目，就把此标签的herf添加到sublinks列表 sublinks.append(link.attrs['href']) return sublinks def getTitles(urls, kv): mtitles = [] for link in urls: r = requests.get(link, headers = kv, timeout = 30) r.raise_for_status() soup = BeautifulSoup(r.text, 'html.parser') titles = soup.find_all('h4') for title in titles: mtitles.append(title.string) return mtitles def getStitles(urls, kv): stitles = [] for link in urls: r = requests.get(link, headers = kv, timeout = 30) r.raise_for_status() soup = BeautifulSoup(r.text, 'html.parser') content = soup.p.parent titles = content.find_all('p', style=\"text-align: center;\") tpls1 = [] tpls2 = [] for title in titles: tpls1.append(title.string) tpls2 = \"、\".join(tpls1) stitles.append(tpls2) return stitles def getOutlines(urls, kv): outlines = [] dr = re.compile(r']+>', re.S) for link in urls: r = requests.get(link, headers = kv, timeout = 30) r.raise_for_status() soup = BeautifulSoup(r.text, 'html.parser') excerpts = soup.find('p', string = '职事信息摘录：') # title = soup.title.string # 纠错机制，如果有错误，开启此处代码，定位篇题 # outlines.append(title) # outlines.append(excerpts) outlinetags = excerpts.find_previous_siblings('p') tpls1 = [] for outline in outlinetags: dd = dr.sub('', str(outline)) tpls1.append(dd) str0 = \"、\".join(tpls1) outlines.append(str0) return outlines def getExcerpts(urls, kv): outlines = [] dr = re.compile(r']+>', re.S) for link in urls: r = requests.get(link, headers = kv, timeout = 30) r.raise_for_status() soup = BeautifulSoup(r.text, 'html.parser') excerpts = soup.find('p', string = '职事信息摘录：') # title = soup.title.string # 纠错机制，如果有错误，开启此处代码，定位篇题 # outlines.append(title) # outlines.append(excerpts) outlinetags = excerpts.find_next_siblings('p') tpls1 = [] for outline in outlinetags: dd = dr.sub('', str(outline)) tpls1.append(dd) str0 = \"、\".join(tpls1) outlines.append(str0) return outlines def rmExtracodes(listdata): prosessedlist = [] for item in listdata: data = item.replace('\\xa0','') prosessedlist.append(data) return prosessedlist # 按Elasticsearch批量导入格式，输出为 JSON 文档 (需要导出JSON时开开，不需要时，关闭) def savetoJson(url, title, outlines, excerpts, subtitles): ls1 = ['url', 'title', 'outline', 'excerpt', 'stitle'] ls2 = url ls3 = rmExtracodes(title) ls4 = rmExtracodes(outlines) ls5 = rmExtracodes(excerpts) ls6 = rmExtracodes(subtitles) indexname = \"pan\" dl = [] for i in range(0, len(ls2)): d = {} d[ls1[0]] = (ls2[i]) d[ls1[1]] = (ls3[i]) d[ls1[2]] = (ls4[i]) d[ls1[3]] = (ls5[i]) d[ls1[4]] = (ls6[i]) d2 = {\"index\":{\"_index\":indexname, \"_id\":i}} dl.append(d2) dl.append(d) json_str = json.dumps(dl, ensure_ascii=False) with open('pan_data.json', 'w') as json_file: json_file.write(json_str) # 自动写入到 Elasticsearch 数据库 def PythonToES(url, title, outlines, excerpts, subtitles): ls1 = ['url', 'title', 'outline', 'excerpt', 'subtitle'] ls2 = url ls3 = rmExtracodes(title) ls4 = rmExtracodes(outlines) ls5 = rmExtracodes(excerpts) ls6 = rmExtracodes(subtitles) for i in range(0, len(ls2)): data = {} data[ls1[0]] = (ls2[i]) data[ls1[1]] = (ls3[i]) data[ls1[2]] = (ls4[i]) data[ls1[3]] = (ls5[i]) data[ls1[4]] = (ls6[i]) Elasticsearch().index(index=\"pantest\", id=i, body=data) def main(): url = \"http://www.panoramic.ministrypropagation.org/home/%e6%97%a7%e7%ba%a6%e9%b8%9f%e7%9e%b0/\" kv = {'user-agent':'Chrome/10.0'} links = getURL(url, kv) # 分类的link列表 outlinelinks = getURL2(links, kv) # 所有纲目的link列表 msgtitles = getTitles(outlinelinks, kv) # 篇题 msgstitles = getStitles(outlinelinks, kv) # 小标题 msgoutlines = getOutlines(outlinelinks, kv) # 纲目 msgexcerpts = getExcerpts(outlinelinks, kv) # 摘录 PythonToES(outlinelinks, msgtitles, msgoutlines, msgexcerpts, msgstitles) # 自动写入 Elasticsearch # 格式化输出: 按Elasticsearch批量导入格式，输出为 JSON 文档 （需要时开开） # savetoJson(outlinelinks, msgtitles, msgoutlines, msgexcerpts, msgstitles) # 问题排查与解决： # print('outlinelinkss_len: ' + str(len(outlinelinks))) # print('msgtitles_len: ' + str(len(msgtitles))) # print('msgstitles_len: ' + str(len(msgstitles))) # print('msgoutlines_len: ' + str(len(msgoutlines))) # print('msgexcerpts_len: ' + str(len(msgexcerpts))) # print('outlinelinkss_len: ' + str(len(outlinelinks))) main() "},"导航/常用软件.html":{"url":"导航/常用软件.html","title":"常用软件","keywords":"","body":"常用软件 设计制作 Adobe | DaVinci Resolve | ScreenToGif 办公阅读/文档编辑 Office: Microsoft Office PDF: Adobe Acrobat PDB: iSilo TXT： Notepad++ MD：Typora 系统相关 系统镜像：官方 | ITELLYOU 系统安装：WePE 系统优化：Mem Reduct | XMeters | Dism++ 桌面插件：8GadgetPack 磁盘管理：DiskGenius 截屏录屏 Snipaste | Captura | FFmpeg (解码器) | OBS Studio 效率 文件搜索：Everything | Listary 文档全文搜索：AnyTXT Searcher| File Locator Pro | Agent Ransack | BBdoc | DocFetcher 快捷键/工作流：AutoHotkey | 按键精灵 电子书管理：Calibre 播放器 完美解码 | VLC | QQ影音 输入法 手心输入法 | 小狼豪 开发/Coding Visual Studio Code | Git 解压缩 7-zip 加密/密码管理 VeraCrypt | KeePass 下载器 IDM | Free Download Manager 模拟器/虚拟机 MuMu模拟器 | VitualBox | Vmware 远程控制 TeamViewer | Anydesk | Spacedesk (MULTI MONITOR) | ZOOM 浏览器 Chrome | Microsoft Edge 其他 Teleport Ultra (网站小偷) | HTML help Workshop (CHM制作) "},"导航/网站导航.html":{"url":"导航/网站导航.html","title":"网站导航","keywords":"","body":"网站导航 常用软件 常用软件 建站 域名购买：NameSilo VPS主机：Vultr 框架 PC前端CSS框架：Layui | AT-UI | Element | View UI 移动前端CSS框架：Vant UI | Ionic JS框架：Vue | React | Angular | jQuery | Node CSS 预处理器： Sass | Less PHP 框架：Laravel 文档 Windows 命令 | git 设计 洋芋田图像工具 素材 Mixkit | "},"tags.html":{"url":"tags.html","title":"Tags","keywords":"","body":"Tags Python爬虫 搜索网站设计 Elasticsearch 搜索网站设计 PHP 搜索网站设计 JS 搜索网站设计 Vue 搜索网站设计 ElementUI 搜索网站设计 "}}